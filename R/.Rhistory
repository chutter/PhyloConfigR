pgls.data = data.frame(data.df$dNdS, data.df$climate)
rownames(pgls.data) = data.df$Species
colnames(pgls.data) = c("dNdS", "climate")
vector.data = pgls.data$dNdS
names(vector.data) = rownames(pgls.data)
#Tests the models
iters = 1000
BM = fitContinuous(species.tree, dat = vector.data, model = c("BM"), control = list(method = "subplex"))
L = fitContinuous(species.tree, dat = vector.data, model = c("lambda"), bounds = list(lambda = c(0,1), sigsq = c(1e-10,100000000)), control = list(method = "subplex", niter = iters))
OU = fitContinuous(species.tree, dat = vector.data, model = c("OU"), control = list(method = "subplex", niter = iters))
W = fitContinuous(species.tree, dat = vector.data, model = c("white"), control = list(method = "subplex", niter = iters))
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
newdata = data.frame(SVL = pgls.data$SVL)
predictions = predict(model, newdata)
combined.data = merge(species.data, slac.data, by.x = "Sample", by.y = "label")
data.df = data.frame(Species = combined.data$Sample,
dNdS = combined.data$dNdS,
climate = combined.data$Elevation)
#DATA TRANSFORMATIONS HERE
data.df$dNdS = (data.df$dNdS)
data.df$climate = data.df$climate
#First test correlation
result = cor.test(data.df$dNdS, data.df$climate, method = "spearman")
plot(data.df$dNdS~data.df$climate)
#Makes data ready for PGLS
pgls.data = data.frame(data.df$dNdS, data.df$climate)
rownames(pgls.data) = data.df$Species
colnames(pgls.data) = c("dNdS", "climate")
vector.data = pgls.data$dNdS
names(vector.data) = rownames(pgls.data)
#Tests the models
iters = 1000
BM = fitContinuous(species.tree, dat = vector.data, model = c("BM"), control = list(method = "subplex"))
L = fitContinuous(species.tree, dat = vector.data, model = c("lambda"), bounds = list(lambda = c(0,1), sigsq = c(1e-10,100000000)), control = list(method = "subplex", niter = iters))
OU = fitContinuous(species.tree, dat = vector.data, model = c("OU"), control = list(method = "subplex", niter = iters))
W = fitContinuous(species.tree, dat = vector.data, model = c("white"), control = list(method = "subplex", niter = iters))
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
combined.data = merge(species.data, slac.data, by.x = "Sample", by.y = "label")
data.df = data.frame(Species = combined.data$Sample,
dNdS = combined.data$dNdS,
climate = combined.data$l_el)
#DATA TRANSFORMATIONS HERE
data.df$dNdS = (data.df$dNdS)
data.df$climate = data.df$climate
#First test correlation
result = cor.test(data.df$dNdS, data.df$climate, method = "spearman")
plot(data.df$dNdS~data.df$climate)
#Makes data ready for PGLS
pgls.data = data.frame(data.df$dNdS, data.df$climate)
rownames(pgls.data) = data.df$Species
colnames(pgls.data) = c("dNdS", "climate")
vector.data = pgls.data$dNdS
names(vector.data) = rownames(pgls.data)
#Tests the models
iters = 1000
BM = fitContinuous(species.tree, dat = vector.data, model = c("BM"), control = list(method = "subplex"))
L = fitContinuous(species.tree, dat = vector.data, model = c("lambda"), bounds = list(lambda = c(0,1), sigsq = c(1e-10,100000000)), control = list(method = "subplex", niter = iters))
OU = fitContinuous(species.tree, dat = vector.data, model = c("OU"), control = list(method = "subplex", niter = iters))
W = fitContinuous(species.tree, dat = vector.data, model = c("white"), control = list(method = "subplex", niter = iters))
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
spp.data = read.csv("/Users/chutter/Dropbox/Research/1_Main-Projects/0_Working-Projects/Rodent_adaptation/Datasets/Pseudomys_division_data.csv")
missing.samples = time.tree$tip.label[!time.tree$tip.label %in% spp.data$Sample]
species.tree = drop.tip(time.tree, missing.samples)
species.data = spp.data[spp.data$Sample %in% species.tree$tip.label,]
slac.data = red.data[!red.data$label %in% missing.samples,]
combined.data = merge(species.data, slac.data, by.x = "Sample", by.y = "label")
data.df = data.frame(Species = combined.data$Sample,
dNdS = combined.data$dNdS,
climate = combined.data$mass_scaled)
#DATA TRANSFORMATIONS HERE
data.df$dNdS = log10(data.df$dNdS)
data.df$climate = log10(data.df$climate)
#First test correlation
result = cor.test(data.df$dNdS, data.df$climate, method = "spearman")
plot(data.df$dNdS~data.df$climate)
#Makes data ready for PGLS
pgls.data = data.frame(data.df$dNdS, data.df$climate)
rownames(pgls.data) = data.df$Species
colnames(pgls.data) = c("dNdS", "climate")
vector.data = pgls.data$dNdS
names(vector.data) = rownames(pgls.data)
#Tests the models
iters = 1000
BM = fitContinuous(species.tree, dat = vector.data, model = c("BM"), control = list(method = "subplex"))
L = fitContinuous(species.tree, dat = vector.data, model = c("lambda"), bounds = list(lambda = c(0,1), sigsq = c(1e-10,100000000)), control = list(method = "subplex", niter = iters))
OU = fitContinuous(species.tree, dat = vector.data, model = c("OU"), control = list(method = "subplex", niter = iters))
W = fitContinuous(species.tree, dat = vector.data, model = c("white"), control = list(method = "subplex", niter = iters))
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
combined.data = merge(species.data, slac.data, by.x = "Sample", by.y = "label")
data.df = data.frame(Species = combined.data$Sample,
dNdS = combined.data$dNdS,
climate = combined.data$mass_scaled)
#DATA TRANSFORMATIONS HERE
data.df$dNdS = log10(data.df$dNdS)
data.df$climate = log10(data.df$climate)
#First test correlation
result = cor.test(data.df$dNdS, data.df$climate, method = "spearman")
plot(data.df$dNdS~data.df$climate)
#Makes data ready for PGLS
pgls.data = data.frame(data.df$dNdS, data.df$climate)
rownames(pgls.data) = data.df$Species
colnames(pgls.data) = c("dNdS", "climate")
vector.data = pgls.data$dNdS
names(vector.data) = rownames(pgls.data)
#Tests the models
iters = 1000
BM = fitContinuous(species.tree, dat = vector.data, model = c("BM"), control = list(method = "subplex"))
L = fitContinuous(species.tree, dat = vector.data, model = c("lambda"), bounds = list(lambda = c(0,1), sigsq = c(1e-10,100000000)), control = list(method = "subplex", niter = iters))
OU = fitContinuous(species.tree, dat = vector.data, model = c("OU"), control = list(method = "subplex", niter = iters))
W = fitContinuous(species.tree, dat = vector.data, model = c("white"), control = list(method = "subplex", niter = iters))
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
#Makes data table
model = c("BM", "lambda", "OU", "WN")
aicc = c(BM$opt$aicc, L$opt$aicc, OU$opt$aicc, W$opt$aicc)
k = c(BM$opt$k, L$opt$k, OU$opt$k, W$opt$k)
parameter = c(BM$opt$sigsq, L$opt$lambda, OU$opt$alpha, W$opt$sigsq)
delta = c(aicc-aicc[which(aicc==min(aicc))])
data.table = data.frame(model, aicc, k, parameter, delta)
best.m = data.table[1,]
best.m
data.table
best.m = data.table[3,]
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = dNdS ~ climate, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
combined.data
summary(model)
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = climate ~ dNdS, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$dNdS, predict(model))^2
summary(model)
R2
R2 = cor(pgls.data$climate, predict(model))^2
summary(model)
R2
#Tests for relationship using best model of trait evolution
model = nlme::gls(model = climate ~ dNdS, data = pgls.data, method = "ML", correlation = corBrownian(phy = species.tree, value= best.m$parameter))
R2 = cor(pgls.data$climate, predict(model))^2
summary(model)
R2
alignment.directory = "/Volumes/LaCie/Structure_maker/trimmed_all-markers"
alignment.format = "phylip"
output.file = "/Volumes/LaCie/Structure_maker/output.str"
population.file = "/Volumes/LaCie/Structure_maker/Populations.csv"
min.taxa.alignment = 4 #not use yet
threads = 1 #no multithreadhing yet
memory = 10
overwrite = TRUE
require(foreach)
# if (dir.exists(output.dir) == FALSE) { dir.create(output.dir) }
if (file.exists(output.file) == TRUE) {
if (overwrite == TRUE){
system(paste0("rm ", output.file))
}
}
#Gathers alignments
align.files = list.files(alignment.directory)
if (length(align.files) == 0) { stop("alignment files could not be found.") }
# Sets up the empty file and doubles it up
pop.file = read.csv(population.file)
pop.file2 = pop.file
pop.file$Sample = paste0(pop.file$Sample, "_1")
pop.file2$Sample = paste0(pop.file2$Sample, "_2")
final.locus = rbind(pop.file, pop.file2)
final.locus = final.locus[order(final.locus$Sample), ]
alignment.directory = "/Volumes/LaCie/Structure_maker/trimmed_all-markers"
alignment.format = "phylip"
output.file = "/Volumes/LaCie/Structure_maker/output.str"
population.file = "/Volumes/LaCie/Structure_maker/Populations.csv"
min.taxa.alignment = 4 #not use yet
threads = 1 #no multithreadhing yet
memory = 10
overwrite = TRUE
require(foreach)
# if (dir.exists(output.dir) == FALSE) { dir.create(output.dir) }
if (file.exists(output.file) == TRUE) {
if (overwrite == TRUE){
system(paste0("rm ", output.file))
}
}
#Gathers alignments
align.files = list.files(alignment.directory)
if (length(align.files) == 0) { stop("alignment files could not be found.") }
# Sets up the empty file and doubles it up
pop.file = read.csv(population.file)
pop.file2 = pop.file
pop.file$Sample = paste0(pop.file$Sample, "_1")
pop.file2$Sample = paste0(pop.file2$Sample, "_2")
final.locus = rbind(pop.file, pop.file2)
final.locus = final.locus[order(final.locus$Sample), ]
# Loops through each alignment
for (i in seq_along(align.files)) {
#Reads in phylip format
if (alignment.format == "phylip") {
align <- Biostrings::readAAMultipleAlignment(file = paste0(alignment.directory, "/", align.files[i]), format = "phylip")
#  align = Biostrings::readDNAStringSet(file = paste0(alignment.dir, "/", align.files[i]), format = "phylip")
#  align = readLines(paste0(alignment.dir, "/", align.files[i]))[-1]
#  align = gsub(".*\\ ", "", align)
#  char.count = nchar(align)
align <- Biostrings::DNAStringSet(align)
save.name <- gsub(".phy$", "", align.files[i])
save.name <- gsub(".phylip$", "", save.name)
} # end phylip
#Reads in fasta format
if (alignment.format == "fasta") {
align <- Biostrings::readDNAStringSet(paste0(alignment.directory, "/", align.files[i]))
save.name <- gsub(".fa$", "", align.files[i])
save.name <- gsub(".fasta$", "", save.name)
} # end phylip
# alignment length finds
alignment = as.matrix(align)
x.len = dim(alignment)[2]
# empty data frame to fill later
save.data = data.frame(
Column = as.numeric(),
Het_Count = as.numeric(),
Miss_Count = as.numeric()
)
#Loops through each column to tablulate heterozygous columns and those with missing data
for (k in 1:x.len){
# Pulls out column
align.col = alignment[, k]
# Gets character count for column
col.counts = table(align.col)[!names(table(align.col)) %in% c("N", "-")]
#Counts het sizes and missing data
het.count = stringr::str_count(as.character(paste0(align.col, collapse = "")), pattern = c("R", "Y", "K", "M", "S", "W", "B", "D", "H", "V"))
miss.count = stringr::str_count(as.character(paste0(align.col, collapse = "")), pattern = c("N", "-", "\\?"))
#Saves data
temp.save = data.frame(
Column = k,
Het_Count = sum(het.count),
Miss_Count = sum(miss.count)
)
save.data = rbind(save.data, temp.save)
} # end k loop
#Selects best column by maximizing heterozygosity and minmimizing missing data
best.column = save.data[save.data$Het_Count == max(save.data$Het_Count),]
best.column = best.column[best.column$Miss_Count == min(best.column$Miss_Count), ][1, ]
#to do, better way to deal with ties
#if (nrow(best.column) > 1){ stop("too many") }
#Seelcts data from best column
final.site = alignment[, best.column$Column]
#Formats final data from alignment using best column data
final.align = data.frame(names(final.site), final.site)
rownames(final.align) = NULL
colnames(final.align) = c("Sample", gsub(".phy$", "", align.files[i]))
#Makes sure each row is unique or it all goes to hell
final.align2 <- final.align
final.align$Sample <- paste0(final.align$Sample, "_1")
final.align2$Sample <- paste0(final.align2$Sample, "_2")
final.align = rbind(final.align, final.align2)
final.align = final.align[order(final.align$Sample),]
for (k in 1:nrow(final.align)){
if (final.align[k, 2] == "M") {
final.align[k, 2] <- "A"
final.align[k + 1, 2] <- "C"
k <- k + 1
}
if (final.align[k,2] == "R"){
final.align[k, 2] = "A"
final.align[k + 1, 2] = "G"
k = k + 1
}
if (final.align[k, 2] == "W") {
final.align[k, 2] <- "A"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
if (final.align[k, 2] == "S") {
final.align[k, 2] <- "C"
final.align[k + 1, 2] <- "G"
k <- k + 1
}
if (final.align[k, 2] == "Y") {
final.align[k, 2] <- "C"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
if (final.align[k, 2] == "K") {
final.align[k, 2] <- "G"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
}#end k loop
#Assigns numerical values
final.align[final.align == "A"] <- 0
final.align[final.align == "T"] <- 1
final.align[final.align == "G"] <- 2
final.align[final.align == "C"] <- 3
final.align[final.align == "N"] <- -9
final.align[final.align == "-"] <- -9
final.align[final.align == "?"] <- -9
# Data frame structure
# Label  Locus1 Locus2
# Samp1    0     0
# Samp1    1     0
# Samp2    0     1
# Samp2    0     1
# Adds to combined data
final.locus = merge(final.locus, final.align, all = TRUE, by = "Sample")
final.locus[is.na(final.locus) == TRUE] <- -9
print(i)
} # end i loop
final.locus
final.locus$Sample = gsub("_1$|_2$", "", final.locus$Sample)
colnames(final.locus)[3:length(colnames(final.locus))] = seq(1:(length(colnames(final.locus)) - 2))
i
alignment.directory = "/Volumes/LaCie/Structure_maker/trimmed_all-markers"
alignment.format = "phylip"
output.file = "/Volumes/LaCie/Structure_maker/output.str"
population.file = "/Volumes/LaCie/Structure_maker/Populations.csv"
min.taxa.alignment = 4 #not use yet
threads = 1 #no multithreadhing yet
memory = 10
overwrite = TRUE
require(foreach)
# if (dir.exists(output.dir) == FALSE) { dir.create(output.dir) }
if (file.exists(output.file) == TRUE) {
if (overwrite == TRUE){
system(paste0("rm ", output.file))
}
}
#Gathers alignments
align.files = list.files(alignment.directory)
if (length(align.files) == 0) { stop("alignment files could not be found.") }
# Sets up the empty file and doubles it up
pop.file = read.csv(population.file)
pop.file2 = pop.file
pop.file$Sample = paste0(pop.file$Sample, "_1")
pop.file2$Sample = paste0(pop.file2$Sample, "_2")
final.locus = rbind(pop.file, pop.file2)
final.locus = final.locus[order(final.locus$Sample), ]
# Loops through each alignment
for (i in seq_along(align.files)) {
#Reads in phylip format
if (alignment.format == "phylip") {
align <- Biostrings::readAAMultipleAlignment(file = paste0(alignment.directory, "/", align.files[i]), format = "phylip")
#  align = Biostrings::readDNAStringSet(file = paste0(alignment.dir, "/", align.files[i]), format = "phylip")
#  align = readLines(paste0(alignment.dir, "/", align.files[i]))[-1]
#  align = gsub(".*\\ ", "", align)
#  char.count = nchar(align)
align <- Biostrings::DNAStringSet(align)
save.name <- gsub(".phy$", "", align.files[i])
save.name <- gsub(".phylip$", "", save.name)
} # end phylip
#Reads in fasta format
if (alignment.format == "fasta") {
align <- Biostrings::readDNAStringSet(paste0(alignment.directory, "/", align.files[i]))
save.name <- gsub(".fa$", "", align.files[i])
save.name <- gsub(".fasta$", "", save.name)
} # end phylip
# alignment length finds
alignment = as.matrix(align)
x.len = dim(alignment)[2]
# empty data frame to fill later
save.data = data.frame(
Column = as.numeric(),
Het_Count = as.numeric(),
Miss_Count = as.numeric()
)
#Loops through each column to tablulate heterozygous columns and those with missing data
for (k in 1:x.len){
# Pulls out column
align.col = alignment[, k]
# Gets character count for column
col.counts = table(align.col)[!names(table(align.col)) %in% c("N", "-")]
#Counts het sizes and missing data
het.count = stringr::str_count(as.character(paste0(align.col, collapse = "")), pattern = c("R", "Y", "K", "M", "S", "W", "B", "D", "H", "V"))
miss.count = stringr::str_count(as.character(paste0(align.col, collapse = "")), pattern = c("N", "-", "\\?"))
#Saves data
temp.save = data.frame(
Column = k,
Het_Count = sum(het.count),
Miss_Count = sum(miss.count)
)
save.data = rbind(save.data, temp.save)
} # end k loop
#Selects best column by maximizing heterozygosity and minmimizing missing data
best.column = save.data[save.data$Het_Count == max(save.data$Het_Count),]
best.column = best.column[best.column$Miss_Count == min(best.column$Miss_Count), ][1, ]
#to do, better way to deal with ties
#if (nrow(best.column) > 1){ stop("too many") }
#Seelcts data from best column
final.site = alignment[, best.column$Column]
#Formats final data from alignment using best column data
final.align = data.frame(names(final.site), final.site)
rownames(final.align) = NULL
colnames(final.align) = c("Sample", gsub(".phy$", "", align.files[i]))
#Makes sure each row is unique or it all goes to hell
final.align2 <- final.align
final.align$Sample <- paste0(final.align$Sample, "_1")
final.align2$Sample <- paste0(final.align2$Sample, "_2")
final.align = rbind(final.align, final.align2)
final.align = final.align[order(final.align$Sample),]
for (k in 1:nrow(final.align)){
if (final.align[k, 2] == "M") {
final.align[k, 2] <- "A"
final.align[k + 1, 2] <- "C"
k <- k + 1
}
if (final.align[k,2] == "R"){
final.align[k, 2] = "A"
final.align[k + 1, 2] = "G"
k = k + 1
}
if (final.align[k, 2] == "W") {
final.align[k, 2] <- "A"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
if (final.align[k, 2] == "S") {
final.align[k, 2] <- "C"
final.align[k + 1, 2] <- "G"
k <- k + 1
}
if (final.align[k, 2] == "Y") {
final.align[k, 2] <- "C"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
if (final.align[k, 2] == "K") {
final.align[k, 2] <- "G"
final.align[k + 1, 2] <- "T"
k <- k + 1
}
}#end k loop
#Assigns numerical values
final.align[final.align == "A"] <- 0
final.align[final.align == "T"] <- 1
final.align[final.align == "G"] <- 2
final.align[final.align == "C"] <- 3
final.align[final.align == "N"] <- -9
final.align[final.align == "-"] <- -9
final.align[final.align == "?"] <- -9
# Data frame structure
# Label  Locus1 Locus2
# Samp1    0     0
# Samp1    1     0
# Samp2    0     1
# Samp2    0     1
# Adds to combined data
final.locus = merge(final.locus, final.align, all = TRUE, by = "Sample")
final.locus[is.na(final.locus) == TRUE] <- -9
print(i)
} # end i loop
final.locus$Sample = gsub("_1$|_2$", "", final.locus$Sample)
colnames(final.locus)[3:length(colnames(final.locus))] = seq(1:(length(colnames(final.locus)) - 2))
write.table(final.locus, output.file,
row.names = FALSE, sep = " ", quote = FALSE, col.names = FALSE
)
